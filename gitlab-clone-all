#!/usr/bin/python3

import argparse
import json
import sys
import pathlib
import traceback
import urllib.parse as parse
import urllib.request as request
from http import HTTPStatus

from git import Repo

api_path = '/api/v{:d}/projects/'


def _exit(_response):
    print(str(_response.read()))
    sys.exit(1)


def _read_json(_response):
    return json.loads(_response.read().decode())


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Clone ALL repositories from GitLab server '
                                                 'available to user')
    parser.add_argument('token', type=str,
                        help='GitLab secret token of the user')
    parser.add_argument('server', type=str,
                        help='URL of the GitLab server')
    parser.add_argument('-b', '--branch', type=str,
                        help='Checkout this branch after cloning')
    parser.add_argument('-n', '--namespace', type=str,
                        help='Only clone projects from this namespace')
    parser.add_argument('-g', '--group', type=str,
                        help='Only clone projects from this group with path, for example "group" or "group/subgroup"')
    parser.add_argument('-in', '--into-namespace', action='store_true',
                        help='Clone into namespace subdirectory')
    parser.add_argument('-f', '--fresh', action='store_true',
                        help='Get the freshest branch')
    parser.add_argument('-v', '--api-version', type=int, default=4,
                        help='GitLab api version. Default: 4')
    # parse and process args
    args = parser.parse_args()
    server_url = parse.urlsplit(args.server)
    if not server_url.scheme:
        server_url = 'http://'+args.server
    else:
        server_url = server_url.geturl()
    server_url = parse.urljoin(server_url, api_path.format(args.api_version))
    header = {'PRIVATE-TOKEN': args.token}
    proxy_support = request.ProxyHandler({})
    opener = request.build_opener(proxy_support)
    request.install_opener(opener)
    # fetch pand process project data
    req = request.Request(server_url)
    req.headers.update(header)
    projects = []
    try:
        num_pages = 1
        print('Fetching 1 page of project infos.')
        with request.urlopen(req) as response:
            if response.getcode() == HTTPStatus.OK:
                projects += _read_json(response)
                num_pages = int(response.info()['X-Total-Pages'])
            else:
                exit(response)
        for page_num in range(num_pages-1):
            pn = page_num + 2
            print('Fetching {} of {} page of project infos.'.format(pn, num_pages))
            req.full_url = parse.urljoin(server_url, '?page={}'.format(pn))
            with request.urlopen(req) as response:
                if response.getcode() == HTTPStatus.OK:
                    projects += _read_json(response)
                else:
                    exit(response)
        num_projects = len(projects)
        for i, p in enumerate(projects):
            pdir = pathdir = p['name']
            if args.into_namespace:
                pdir = pathdir = p['path_with_namespace']
            if args.namespace:
                ns = p['namespace']['name']
                if args.namespace != p['namespace']['name']:
                    print('Skipping {} from {} namespace...'.format(pdir, ns))
                    continue
            if args.group:
                nwn = p['name_with_namespace'].replace(" ", "")
                if not nwn.startswith(args.group):
                    print('Skipping {} from {} group...'.format(pdir, nwn))
                    continue
                pathdir = p['path_with_namespace']
            if pathlib.Path(pathdir).exists():
                print('Project {} already exists. Skipping...'.format(pdir))
                continue
            try:
                pathlib.Path(pathdir).mkdir(parents=True, exist_ok=True)
                repo = Repo.clone_from(p['ssh_url_to_repo'], pathdir)
                origin = repo.remote('origin')
                for f in origin.fetch():
                    pass
                if not args.fresh and args.branch and repo.active_branch.name != args.branch:
                    for r in origin.refs:
                        if r.remote_head == args.branch:
                            repo.create_head(args.branch, r).set_tracking_branch(r).checkout()
                if args.fresh:
                    last_commit = repo.head.commit
                    repo.head.reference = repo.commit(last_commit)
                    repo.head.reset(index=True, working_tree=True)
                print('Cloned {} of {}: {} path: {}'.format(i+1, num_projects, pdir, pathdir))
            except Exception as error:
                print('Error while cloning {}:\n{!s}\n{}'
                      .format(pdir, error, traceback.format_exc()))
                continue
    except Exception as error:
        print(str(error))
        sys.exit(2)
